{"version":3,"file":"static/js/266.e623c0e9.chunk.js","mappings":"0NA+IA,UAxIa,WACT,IAAMA,GAASC,EAAAA,EAAAA,QAAO,MAEhBC,GAAcC,EAAAA,EAAAA,YAAWC,EAAAA,GACzBC,GAAiBF,EAAAA,EAAAA,YAAWG,EAAAA,GAE5BC,GAAYN,EAAAA,EAAAA,QAAO,MACnBO,GAAUP,EAAAA,EAAAA,QAAO,MAKvBQ,GAA0BC,EAAAA,EAAAA,GAAS,CAC/BC,WAAY,GACZC,aAAc,KAChBC,GAAAC,EAAAA,EAAAA,GAAAL,EAAA,GAHKM,EAAKF,EAAA,GAAEG,EAAQH,EAAA,IAMtBI,EAAAA,EAAAA,YAAU,WAcN,OAZAjB,EAAOkB,SAAUC,EAAAA,EAAAA,IAAG,yBAEpBnB,EAAOkB,QAAQE,qBAGfpB,EAAOkB,QAAQG,GAAG,kBAAkB,SAAAC,GAChCN,GAAS,SAAAO,GACLA,EAAMX,aAAaY,KAAKF,EAC5B,GACJ,IAGO,kBAAMtB,EAAOkB,QAAQO,YAAY,CAC5C,GAAG,KAGHR,EAAAA,EAAAA,YAAU,WACFf,EAAYwB,aACZnB,EAAUW,QAAQS,QAClBtB,EAAe,CAAEuB,KAAM,yBAE/B,GAAG,CAAC1B,EAAYwB,cAGhBT,EAAAA,EAAAA,YAAU,WAENT,EAAQU,QAAQW,UAAYrB,EAAQU,QAAQY,aAIxCf,EAAMH,aAAamB,SAAW7B,EAAYwB,YAC1CrB,EAAe,CAAEuB,KAAM,4BAE/B,GAAG,CAACb,EAAMH,eAgCV,OACIoB,EAAAA,EAAAA,MAAA,OAAKC,GAAG,eAAeC,UAAW,4DAA8DhC,EAAYwB,WAAa,2BAA6B,IAAIS,SAAA,EAEtJH,EAAAA,EAAAA,MAAA,OAAKE,UAAU,4BAA2BC,SAAA,CAAC,QAEvCC,EAAAA,EAAAA,KAAA,QAAMC,QAAS,kBAAMhC,EAAe,CAAEuB,KAAM,aAAc,EAAEM,UAAU,uBAAsBC,UACxFC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,8BAIrBE,EAAAA,EAAAA,KAAA,OAAKH,GAAG,OAAOC,UAAU,WAAWI,IAAK9B,EAAQ2B,SAC5CpB,EAAMH,aAAa2B,KAAI,SAACjB,EAASkB,GAE9B,OAAIlB,EAAQmB,WAAavC,EAAYwC,KAAKD,UAElCT,EAAAA,EAAAA,MAAA,OAAKE,UAAU,YAAWC,SAAA,EACtBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAcC,UACzBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,qBAAoBC,SAAEb,EAAQA,aAEjDc,EAAAA,EAAAA,KAAA,OAAKF,UAAU,0BAA0BS,IAAKrB,EAAQsB,OAAQC,IAAI,qBAJtCL,IAUhCR,EAAAA,EAAAA,MAAA,OAAKE,UAAU,aAAYC,SAAA,EACvBC,EAAAA,EAAAA,KAACU,EAAAA,GAAI,CAACC,GAAE,YAAAC,OAAc1B,EAAQmB,UAAWN,UACrCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,cAAcS,IAAKrB,EAAQsB,YAE9CR,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAcC,UACzBH,EAAAA,EAAAA,MAAA,OAAKE,UAAU,qBAAoBC,SAAA,EAC/BC,EAAAA,EAAAA,KAACU,EAAAA,GAAI,CAACC,GAAE,YAAAC,OAAc1B,EAAQmB,UAAWN,UACrCH,EAAAA,EAAAA,MAAA,UAAAG,SAAA,CAASb,EAAQmB,SAAS,UAE7BnB,EAAQA,eATYkB,EAe7C,OAIJJ,EAAAA,EAAAA,KAAA,QAAMa,SAjEO,SAACC,GAClBA,EAAEC,iBAGFnD,EAAOkB,QAAQkC,KAAK,kBAAmB,CACnC9B,QAASP,EAAMJ,WACf0C,MAAOnD,EAAYwC,KAAKW,QAG5BrC,GAAS,SAAAO,GAELA,EAAMX,aAAaY,KAAK,CACpBF,QAASC,EAAMZ,WACf8B,SAAUvC,EAAYwC,KAAKD,SAC3BG,OAAQ1C,EAAYwC,KAAKE,SAG7BrB,EAAMZ,WAAa,EACvB,GACJ,EA8CsCsB,GAAG,WAAWC,UAAU,uBAAsBC,UACxEC,EAAAA,EAAAA,KAAA,SAAOkB,MAAOvC,EAAMJ,WAAY4C,SA1ElB,SAACL,GACvB,IAAMI,EAAQJ,EAAEM,OAAOF,MAEvBtC,GAAS,SAAAO,GACLA,EAAMZ,WAAa2C,CACvB,GACJ,EAoEyEhB,IAAK/B,EAAWqB,KAAK,OAAOM,UAAU,aAAaD,GAAG,YAAYwB,YAAY,uBAAkBC,aAAa,YAI1L,C","sources":["components/Chat.jsx"],"sourcesContent":["import React, { useContext, useEffect, useRef } from 'react'\r\nimport StateContext from '../StateContext'\r\nimport DispatchContext from '../DispatchContext'\r\nimport { useImmer } from 'use-immer'\r\nimport { io } from 'socket.io-client'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Chat = () => {\r\n    const socket = useRef(null)\r\n\r\n    const globalState = useContext(StateContext)\r\n    const globalDispatch = useContext(DispatchContext)\r\n\r\n    const chatField = useRef(null)\r\n    const chatLog = useRef(null) // For chat scrollbar to auto scroll down\r\n    // not document.querySelector. A Ref is like a box to hold a value. \r\n    // Unlike state, we can directly mutate it\r\n    // React will not re-render when our reference changes\r\n\r\n    const [state, setState] = useImmer({\r\n        fieldValue: '',\r\n        chatMessages: []\r\n    })\r\n\r\n    // Run the 1st time component renders - Frontend to begin listening for an event called \"chatFromServer\"\r\n    useEffect(() => {\r\n        // Establish an ongoing bidirectional connection between the browser and the backend server\r\n        socket.current = io(\"http://localhost:8080\")\r\n\r\n        socket.current.removeAllListeners()\r\n        // Arg 1: Name of event the server will emit to use (programmed in backend)\r\n        // Arg 2: Function that will run whenever the specified event in Arg 1 happens\r\n        socket.current.on(\"chatFromServer\", message => {\r\n            setState(draft => {\r\n                draft.chatMessages.push(message)\r\n            })\r\n        })\r\n\r\n        // End socket connection\r\n        return () => socket.current.disconnect()\r\n    }, [])\r\n\r\n    // Watch isChatOpen changes\r\n    useEffect(() => {\r\n        if (globalState.isChatOpen) {\r\n            chatField.current.focus()                           // focus on input field\r\n            globalDispatch({ type: \"clearUnreadChatCount\" })    // Clear no. of unread msg in global state\r\n        }\r\n    }, [globalState.isChatOpen])\r\n\r\n    // Watch for new chat messages\r\n    useEffect(() => {\r\n        // Whenever a new message is pushed into the collection, scroll the chatlog div down to the bottom\r\n        chatLog.current.scrollTop = chatLog.current.scrollHeight\r\n\r\n        // Don't run when component is first rendered, when chatMessages = 0\r\n        // Run if there are new messages & when chat is not open\r\n        if (state.chatMessages.length && !globalState.isChatOpen) {\r\n            globalDispatch({ type: \"incrementUnreadChatCount\" })\r\n        }\r\n    }, [state.chatMessages])\r\n\r\n\r\n    const handleFieldChange = (e) => {\r\n        const value = e.target.value\r\n\r\n        setState(draft => {\r\n            draft.fieldValue = value\r\n        })\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        // Send message to chat server - Server will broadcast to connected users\r\n        // Server will listen to an event \"chatFromBrowser\"\r\n        socket.current.emit(\"chatFromBrowser\", {\r\n            message: state.fieldValue,\r\n            token: globalState.user.token\r\n        })\r\n\r\n        setState(draft => {\r\n            // Add message to state collection of messages\r\n            draft.chatMessages.push({\r\n                message: draft.fieldValue,\r\n                username: globalState.user.username,\r\n                avatar: globalState.user.avatar\r\n            })\r\n            // Clear out input field\r\n            draft.fieldValue = ''\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div id=\"chat-wrapper\" className={\"chat-wrapper shadow border-top border-left border-right \" + (globalState.isChatOpen ? \"chat-wrapper--is-visible\" : \"\")}>\r\n            {/* Chat Title bar */}\r\n            <div className=\"chat-title-bar bg-primary\">\r\n                Chat\r\n                <span onClick={() => globalDispatch({ type: \"closeChat\" })} className=\"chat-title-bar-close\">\r\n                    <i className=\"fas fa-times-circle\"></i>\r\n                </span>\r\n            </div>\r\n            {/* Chat messages display */}\r\n            <div id=\"chat\" className=\"chat-log\" ref={chatLog}>\r\n                {state.chatMessages.map((message, index) => {\r\n                    // If entered by the logged in user\r\n                    if (message.username === globalState.user.username) {\r\n                        return (\r\n                            <div className=\"chat-self\" key={index}>\r\n                                <div className=\"chat-message\">\r\n                                    <div className=\"chat-message-inner\">{message.message}</div>\r\n                                </div>\r\n                                <img className=\"chat-avatar avatar-tiny\" src={message.avatar} alt=\"profile avatar\"/>\r\n                            </div>\r\n                        )\r\n                    } else {\r\n                        // If not entered by the logged in user\r\n                        return (\r\n                            <div className=\"chat-other\" key={index}>\r\n                                <Link to={`/profile/${message.username}`}>\r\n                                    <img className=\"avatar-tiny\" src={message.avatar} />\r\n                                </Link>\r\n                                <div className=\"chat-message\">\r\n                                    <div className=\"chat-message-inner\">\r\n                                        <Link to={`/profile/${message.username}`}>\r\n                                            <strong>{message.username}: </strong>\r\n                                        </Link>\r\n                                        {message.message}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    }\r\n                })}\r\n            </div>\r\n\r\n            {/* User input */}\r\n            <form onSubmit={handleSubmit} id=\"chatForm\" className=\"chat-form border-top\">\r\n                <input value={state.fieldValue} onChange={handleFieldChange} ref={chatField} type=\"text\" className=\"chat-field\" id=\"chatField\" placeholder=\"Type a messageâ€¦\" autoComplete=\"off\" />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat"],"names":["socket","useRef","globalState","useContext","StateContext","globalDispatch","DispatchContext","chatField","chatLog","_useImmer","useImmer","fieldValue","chatMessages","_useImmer2","_slicedToArray","state","setState","useEffect","current","io","removeAllListeners","on","message","draft","push","disconnect","isChatOpen","focus","type","scrollTop","scrollHeight","length","_jsxs","id","className","children","_jsx","onClick","ref","map","index","username","user","src","avatar","alt","Link","to","concat","onSubmit","e","preventDefault","emit","token","value","onChange","target","placeholder","autoComplete"],"sourceRoot":""}