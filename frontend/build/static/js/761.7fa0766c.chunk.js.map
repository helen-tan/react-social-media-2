{"version":3,"file":"static/js/761.7fa0766c.chunk.js","mappings":"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","sources":["components/Search.jsx"],"sourcesContent":["import React, { useContext, useEffect } from 'react'\r\nimport Axios from 'axios'\r\nimport Post from './Post'\r\nimport DispatchContext from '../DispatchContext'\r\nimport { useImmer } from 'use-immer'\r\n\r\nconst Search = () => {\r\n    const globalDispatch = useContext(DispatchContext)\r\n\r\n    const [state, setState] = useImmer({\r\n        searchTerm: '',\r\n        results: [],\r\n        show: 'neither',\r\n        requestCount: 0\r\n    })\r\n\r\n    useEffect(() => {\r\n        // Add keyboard event listener to browser (fn runs when ANY key is pressed)\r\n        document.addEventListener(\"keyup\", searchKeyPressHandler)\r\n\r\n        // Stop listening to the keyboard press when the component is closed\r\n        return () => {\r\n            document.removeEventListener(\"keyup\", searchKeyPressHandler)\r\n        }\r\n    }, [])\r\n\r\n    // Send a req to the server only after some time after typing (not on every keystroke to avoid flooding the server)\r\n    // Watch state.searchTerm for changes\r\n    useEffect(() => {\r\n        if (state.searchTerm.trim()) {\r\n            setState(draft => {\r\n                draft.show = \"loading\"\r\n            })// Show loading icon\r\n\r\n            const delay = setTimeout(() => {\r\n                //console.log(state.searchTerm)\r\n                setState(draft => { draft.requestCount++ })\r\n            }, 750)\r\n\r\n            // Clean up fn not only runs when the component unmounts,\r\n            // but also the next time when the useEffect runs\r\n            return () => clearTimeout(delay)\r\n            // cancels the setTimeout fn above\r\n\r\n            // type 1 char > state.earchTerm changes > useEffect runs > setTimeout runs > quickly type another char > state.searchTerm changes > before useEffect runs again, the 1st instance will run its cleanup return fn \r\n            // When a person is typing at a reasonable pace, each keystroke will keep clearing the timeout\r\n            // and setTimeout fn will only run after they stop typing for the ms specified\r\n        } else {\r\n            setState(draft => {\r\n                draft.show = 'neither'\r\n            })\r\n        }\r\n    }, [state.searchTerm])\r\n\r\n    // Watch state.requestCount for changes\r\n    useEffect(() => {\r\n        // so that this won't run when component first renders\r\n        if (state.requestCount) {\r\n            const ourRequest = Axios.CancelToken.source() // create cancel token to cancel req if component unmounts in the middle of the req\r\n\r\n            async function fetchResults() {\r\n                try {\r\n                    const response = await Axios.post('/search', { searchTerm: state.searchTerm }, { cancelToken: ourRequest.token })\r\n                    // console.log(response.data)\r\n                    setState(draft => {\r\n                        draft.results = response.data\r\n                        draft.show = \"results\" // makes results visible\r\n                    })\r\n                } catch (err) {\r\n                    console.log(\"There was a problem or the request was cancelled.\")\r\n                }\r\n            }\r\n            fetchResults()\r\n\r\n            return () => ourRequest.cancel()\r\n        }\r\n    }, [state.requestCount])\r\n\r\n    const searchKeyPressHandler = (e) => {\r\n        // If the key pressed is the esc key\r\n        if (e.keyCode === 27) globalDispatch({ type: \"closeSearch\" })\r\n    }\r\n\r\n    // Set the user input in state for every keystroke\r\n    const handleInput = (e) => {\r\n        const value = e.target.value\r\n        setState(draft => {\r\n            draft.searchTerm = value // with Immer, we have draft which allows us to directly mutate state\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"search-overlay-top shadow-sm\">\r\n                <div className=\"container container--narrow\">\r\n                    <label htmlFor=\"live-search-field\" className=\"search-overlay-icon\">\r\n                        <i className=\"fas fa-search\"></i>\r\n                    </label>\r\n                    {/* Search input */}\r\n                    <input onChange={handleInput} autoFocus type=\"text\" autoComplete=\"off\" id=\"live-search-field\" className=\"live-search-field\" placeholder=\"What are you interested in?\" />\r\n                    <span onClick={() => globalDispatch({ type: \"closeSearch\" })} className=\"close-live-search\">\r\n                        <i className=\"fas fa-times-circle\"></i>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"search-overlay-bottom\">\r\n                <div className=\"container container--narrow py-3\">\r\n                    {/* Loading Spinner */}\r\n                    <div className={\"circle-loader \" + (state.show === \"loading\" ? \"circle-loader--visible\" : \"\")}></div>\r\n                    {/* Search Results */}\r\n                    <div className={\"live-search-results \" + (state.show === \"results\" ? \"live-search-results--visible\" : \"\")}>\r\n                        {/* If search results != 0. Use Boolean so number 0 will not show*/}\r\n                        {Boolean(state.results.length) && (\r\n                            <div className=\"list-group shadow-sm\">\r\n                                <div className=\"list-group-item active\">\r\n                                    <strong>Search Results</strong> ({state.results.length} {state.results.length > 1 ? \"items\" : \"item\"} found)\r\n                                </div>\r\n                                {state.results.map(post => {\r\n                                    return <Post post={post} key={post._id} onClick={() => globalDispatch({ type: \"closeSearch\" })}/>\r\n                                })}\r\n                            </div>\r\n                        )}\r\n\r\n                        {/* If no results */}\r\n                        {!Boolean(state.results.length) && <p className='alert alert-danger text-center shadow-sm'>Sorry, we could not find any results for that search.</p> }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Search"],"names":["globalDispatch","useContext","DispatchContext","_useImmer","useImmer","searchTerm","results","show","requestCount","_useImmer2","_slicedToArray","state","setState","useEffect","document","addEventListener","searchKeyPressHandler","removeEventListener","trim","draft","delay","setTimeout","clearTimeout","fetchResults","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_context","prev","next","Axios","cancelToken","ourRequest","token","sent","data","t0","console","log","stop","apply","arguments","cancel","e","keyCode","type","_jsxs","_Fragment","children","_jsx","className","htmlFor","onChange","value","target","autoFocus","autoComplete","id","placeholder","onClick","Boolean","length","map","post","Post","_id"],"sourceRoot":""}